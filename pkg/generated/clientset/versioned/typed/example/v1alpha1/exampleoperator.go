// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/enj/example-operator/pkg/apis/example/v1alpha1"
	scheme "github.com/enj/example-operator/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ExampleOperatorsGetter has a method to return a ExampleOperatorInterface.
// A group's client should implement this interface.
type ExampleOperatorsGetter interface {
	ExampleOperators(namespace string) ExampleOperatorInterface
}

// ExampleOperatorInterface has methods to work with ExampleOperator resources.
type ExampleOperatorInterface interface {
	Create(*v1alpha1.ExampleOperator) (*v1alpha1.ExampleOperator, error)
	Update(*v1alpha1.ExampleOperator) (*v1alpha1.ExampleOperator, error)
	UpdateStatus(*v1alpha1.ExampleOperator) (*v1alpha1.ExampleOperator, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.ExampleOperator, error)
	List(opts v1.ListOptions) (*v1alpha1.ExampleOperatorList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ExampleOperator, err error)
	ExampleOperatorExpansion
}

// exampleOperators implements ExampleOperatorInterface
type exampleOperators struct {
	client rest.Interface
	ns     string
}

// newExampleOperators returns a ExampleOperators
func newExampleOperators(c *ExampleoperatorV1alpha1Client, namespace string) *exampleOperators {
	return &exampleOperators{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the exampleOperator, and returns the corresponding exampleOperator object, and an error if there is any.
func (c *exampleOperators) Get(name string, options v1.GetOptions) (result *v1alpha1.ExampleOperator, err error) {
	result = &v1alpha1.ExampleOperator{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("exampleoperators").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ExampleOperators that match those selectors.
func (c *exampleOperators) List(opts v1.ListOptions) (result *v1alpha1.ExampleOperatorList, err error) {
	result = &v1alpha1.ExampleOperatorList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("exampleoperators").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested exampleOperators.
func (c *exampleOperators) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("exampleoperators").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a exampleOperator and creates it.  Returns the server's representation of the exampleOperator, and an error, if there is any.
func (c *exampleOperators) Create(exampleOperator *v1alpha1.ExampleOperator) (result *v1alpha1.ExampleOperator, err error) {
	result = &v1alpha1.ExampleOperator{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("exampleoperators").
		Body(exampleOperator).
		Do().
		Into(result)
	return
}

// Update takes the representation of a exampleOperator and updates it. Returns the server's representation of the exampleOperator, and an error, if there is any.
func (c *exampleOperators) Update(exampleOperator *v1alpha1.ExampleOperator) (result *v1alpha1.ExampleOperator, err error) {
	result = &v1alpha1.ExampleOperator{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("exampleoperators").
		Name(exampleOperator.Name).
		Body(exampleOperator).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *exampleOperators) UpdateStatus(exampleOperator *v1alpha1.ExampleOperator) (result *v1alpha1.ExampleOperator, err error) {
	result = &v1alpha1.ExampleOperator{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("exampleoperators").
		Name(exampleOperator.Name).
		SubResource("status").
		Body(exampleOperator).
		Do().
		Into(result)
	return
}

// Delete takes name of the exampleOperator and deletes it. Returns an error if one occurs.
func (c *exampleOperators) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("exampleoperators").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *exampleOperators) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("exampleoperators").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched exampleOperator.
func (c *exampleOperators) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ExampleOperator, err error) {
	result = &v1alpha1.ExampleOperator{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("exampleoperators").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
